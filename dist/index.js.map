{"version":3,"file":"index.js","sources":["../webpack://action-internal-link-consistency/./node_modules/@actions/core/lib/command.js","../webpack://action-internal-link-consistency/./node_modules/@actions/core/lib/core.js","../webpack://action-internal-link-consistency/./node_modules/@actions/core/lib/file-command.js","../webpack://action-internal-link-consistency/./node_modules/@actions/core/lib/utils.js","../webpack://action-internal-link-consistency/./src/Config.ts","../webpack://action-internal-link-consistency/./src/CrossReferencer.ts","../webpack://action-internal-link-consistency/./src/DataCollection/SourceData.ts","../webpack://action-internal-link-consistency/./src/DataCollection/TargetData.ts","../webpack://action-internal-link-consistency/./src/Defaults.ts","../webpack://action-internal-link-consistency/./src/FileDetails.ts","../webpack://action-internal-link-consistency/./src/InclusionController.ts","../webpack://action-internal-link-consistency/./src/InputParser.ts","../webpack://action-internal-link-consistency/./src/IoOperations.ts","../webpack://action-internal-link-consistency/./src/IssueLogger.ts","../webpack://action-internal-link-consistency/./src/Main.ts","../webpack://action-internal-link-consistency/./src/Setup.ts","../webpack://action-internal-link-consistency/external \"fs\"","../webpack://action-internal-link-consistency/external \"os\"","../webpack://action-internal-link-consistency/external \"path\"","../webpack://action-internal-link-consistency/webpack/bootstrap","../webpack://action-internal-link-consistency/webpack/runtime/compat","../webpack://action-internal-link-consistency/webpack/startup"],"sourcesContent":["\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nfunction issueCommand(command, properties, message) {\n    const cmd = new Command(command, properties, message);\n    process.stdout.write(cmd.toString() + os.EOL);\n}\nexports.issueCommand = issueCommand;\nfunction issue(name, message = '') {\n    issueCommand(name, {}, message);\n}\nexports.issue = issue;\nconst CMD_STRING = '::';\nclass Command {\n    constructor(command, properties, message) {\n        if (!command) {\n            command = 'missing.command';\n        }\n        this.command = command;\n        this.properties = properties;\n        this.message = message;\n    }\n    toString() {\n        let cmdStr = CMD_STRING + this.command;\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' ';\n            let first = true;\n            for (const key in this.properties) {\n                if (this.properties.hasOwnProperty(key)) {\n                    const val = this.properties[key];\n                    if (val) {\n                        if (first) {\n                            first = false;\n                        }\n                        else {\n                            cmdStr += ',';\n                        }\n                        cmdStr += `${key}=${escapeProperty(val)}`;\n                    }\n                }\n            }\n        }\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;\n        return cmdStr;\n    }\n}\nfunction escapeData(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A');\n}\nfunction escapeProperty(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A')\n        .replace(/:/g, '%3A')\n        .replace(/,/g, '%2C');\n}\n//# sourceMappingURL=command.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"./command\");\nconst file_command_1 = require(\"./file-command\");\nconst utils_1 = require(\"./utils\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\n/**\n * The code to exit an action\n */\nvar ExitCode;\n(function (ExitCode) {\n    /**\n     * A code indicating that the action was successful\n     */\n    ExitCode[ExitCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * A code indicating that the action was a failure\n     */\n    ExitCode[ExitCode[\"Failure\"] = 1] = \"Failure\";\n})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));\n//-----------------------------------------------------------------------\n// Variables\n//-----------------------------------------------------------------------\n/**\n * Sets env variable for this action and future actions in the job\n * @param name the name of the variable to set\n * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction exportVariable(name, val) {\n    const convertedVal = utils_1.toCommandValue(val);\n    process.env[name] = convertedVal;\n    const filePath = process.env['GITHUB_ENV'] || '';\n    if (filePath) {\n        const delimiter = '_GitHubActionsFileCommandDelimeter_';\n        const commandValue = `${name}<<${delimiter}${os.EOL}${convertedVal}${os.EOL}${delimiter}`;\n        file_command_1.issueCommand('ENV', commandValue);\n    }\n    else {\n        command_1.issueCommand('set-env', { name }, convertedVal);\n    }\n}\nexports.exportVariable = exportVariable;\n/**\n * Registers a secret which will get masked from logs\n * @param secret value of the secret\n */\nfunction setSecret(secret) {\n    command_1.issueCommand('add-mask', {}, secret);\n}\nexports.setSecret = setSecret;\n/**\n * Prepends inputPath to the PATH (for this action and future actions)\n * @param inputPath\n */\nfunction addPath(inputPath) {\n    const filePath = process.env['GITHUB_PATH'] || '';\n    if (filePath) {\n        file_command_1.issueCommand('PATH', inputPath);\n    }\n    else {\n        command_1.issueCommand('add-path', {}, inputPath);\n    }\n    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;\n}\nexports.addPath = addPath;\n/**\n * Gets the value of an input.  The value is also trimmed.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string\n */\nfunction getInput(name, options) {\n    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';\n    if (options && options.required && !val) {\n        throw new Error(`Input required and not supplied: ${name}`);\n    }\n    return val.trim();\n}\nexports.getInput = getInput;\n/**\n * Sets the value of an output.\n *\n * @param     name     name of the output to set\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setOutput(name, value) {\n    command_1.issueCommand('set-output', { name }, value);\n}\nexports.setOutput = setOutput;\n/**\n * Enables or disables the echoing of commands into stdout for the rest of the step.\n * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.\n *\n */\nfunction setCommandEcho(enabled) {\n    command_1.issue('echo', enabled ? 'on' : 'off');\n}\nexports.setCommandEcho = setCommandEcho;\n//-----------------------------------------------------------------------\n// Results\n//-----------------------------------------------------------------------\n/**\n * Sets the action status to failed.\n * When the action exits it will be with an exit code of 1\n * @param message add error issue message\n */\nfunction setFailed(message) {\n    process.exitCode = ExitCode.Failure;\n    error(message);\n}\nexports.setFailed = setFailed;\n//-----------------------------------------------------------------------\n// Logging Commands\n//-----------------------------------------------------------------------\n/**\n * Gets whether Actions Step Debug is on or not\n */\nfunction isDebug() {\n    return process.env['RUNNER_DEBUG'] === '1';\n}\nexports.isDebug = isDebug;\n/**\n * Writes debug message to user log\n * @param message debug message\n */\nfunction debug(message) {\n    command_1.issueCommand('debug', {}, message);\n}\nexports.debug = debug;\n/**\n * Adds an error issue\n * @param message error issue message. Errors will be converted to string via toString()\n */\nfunction error(message) {\n    command_1.issue('error', message instanceof Error ? message.toString() : message);\n}\nexports.error = error;\n/**\n * Adds an warning issue\n * @param message warning issue message. Errors will be converted to string via toString()\n */\nfunction warning(message) {\n    command_1.issue('warning', message instanceof Error ? message.toString() : message);\n}\nexports.warning = warning;\n/**\n * Writes info to log with console.log.\n * @param message info message\n */\nfunction info(message) {\n    process.stdout.write(message + os.EOL);\n}\nexports.info = info;\n/**\n * Begin an output group.\n *\n * Output until the next `groupEnd` will be foldable in this group\n *\n * @param name The name of the output group\n */\nfunction startGroup(name) {\n    command_1.issue('group', name);\n}\nexports.startGroup = startGroup;\n/**\n * End an output group.\n */\nfunction endGroup() {\n    command_1.issue('endgroup');\n}\nexports.endGroup = endGroup;\n/**\n * Wrap an asynchronous function call in a group.\n *\n * Returns the same type as the function itself.\n *\n * @param name The name of the group\n * @param fn The function to wrap in the group\n */\nfunction group(name, fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n        startGroup(name);\n        let result;\n        try {\n            result = yield fn();\n        }\n        finally {\n            endGroup();\n        }\n        return result;\n    });\n}\nexports.group = group;\n//-----------------------------------------------------------------------\n// Wrapper action state\n//-----------------------------------------------------------------------\n/**\n * Saves state for current action, the state can only be retrieved by this action's post job execution.\n *\n * @param     name     name of the state to store\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction saveState(name, value) {\n    command_1.issueCommand('save-state', { name }, value);\n}\nexports.saveState = saveState;\n/**\n * Gets the value of an state set by this action's main execution.\n *\n * @param     name     name of the state to get\n * @returns   string\n */\nfunction getState(name) {\n    return process.env[`STATE_${name}`] || '';\n}\nexports.getState = getState;\n//# sourceMappingURL=core.js.map","\"use strict\";\n// For internal use, subject to change.\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\nfunction issueCommand(command, message) {\n    const filePath = process.env[`GITHUB_${command}`];\n    if (!filePath) {\n        throw new Error(`Unable to find environment variable for file command ${command}`);\n    }\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Missing file at path: ${filePath}`);\n    }\n    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {\n        encoding: 'utf8'\n    });\n}\nexports.issueCommand = issueCommand;\n//# sourceMappingURL=file-command.js.map","\"use strict\";\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Sanitizes an input into a string so it can be passed into issueCommand safely\n * @param input input to sanitize into a string\n */\nfunction toCommandValue(input) {\n    if (input === null || input === undefined) {\n        return '';\n    }\n    else if (typeof input === 'string' || input instanceof String) {\n        return input;\n    }\n    return JSON.stringify(input);\n}\nexports.toCommandValue = toCommandValue;\n//# sourceMappingURL=utils.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Config = void 0;\r\nconst fs_1 = require(\"fs\");\r\nconst FileDetails_1 = require(\"./FileDetails\");\r\nclass Config {\r\n    constructor(source, targets, fileTypes, excludeFolders, excludeFiles) {\r\n        // SOURCE\r\n        if (source === '' || source === null || source === undefined) {\r\n            throw new Error('[Config]: Source path must be a valid string');\r\n        }\r\n        // must start with ./\r\n        if (!this.PathStartRelative(source)) {\r\n            throw new Error('[Config]: Source path must start with \"./\"');\r\n        }\r\n        // must end with /\r\n        if (!this.PathEndWithSlash(source)) {\r\n            throw new Error('[Config]: Source path must end with \"/\"');\r\n        }\r\n        if (!fs_1.existsSync(source)) {\r\n            throw new Error(`Config error: Source directory does not exist / not found`);\r\n        }\r\n        this.Source = source;\r\n        // TARGETS\r\n        this.Targets = [];\r\n        this.SupportedFormats = this.GetSupportedFormats();\r\n        for (const targetPath of targets) {\r\n            if (targetPath === '' || targetPath === null || targetPath === undefined) {\r\n                throw new Error(`[Config]: Target path must be a valid string: ${targetPath}`);\r\n            }\r\n            if (!this.PathStartRelative(targetPath)) {\r\n                throw new Error(`[Config]: Target path must start with \"./\": ${targetPath}`);\r\n            }\r\n            if (this.PathEndWithSlash(targetPath)) {\r\n                throw new Error(`[Config]: Target path must not end with \"/\": ${targetPath}`);\r\n            }\r\n            if (!fs_1.existsSync(targetPath)) {\r\n                throw new Error(`Config error: Target does not exist / not found: ${targetPath}`);\r\n            }\r\n            // Get filename / extension\r\n            const pathData = new FileDetails_1.FileDetails(targetPath);\r\n            const patternData = this.SupportedFormats.find(e => e.Extension === pathData.Extension);\r\n            if (patternData === undefined) {\r\n                console.log(this.SupportedFormats.map(e => e.Extension));\r\n                throw new Error(`[Config]: Target must be a supported document type: ${targetPath} | ${pathData.Extension}`);\r\n            }\r\n            this.Targets.push({ Path: targetPath, Extension: patternData.Extension, Pattern: patternData.Pattern });\r\n        }\r\n        if (fileTypes === undefined) {\r\n            this.FileTypes = [];\r\n        }\r\n        else {\r\n            this.FileTypeValidation(fileTypes);\r\n            this.FileTypes = fileTypes;\r\n        }\r\n        if (excludeFolders === undefined) {\r\n            this.ExcludeFolders = [];\r\n        }\r\n        else {\r\n            this.ExcludeFolders = excludeFolders;\r\n        }\r\n        if (excludeFiles === undefined) {\r\n            this.ExcludeFiles = [];\r\n        }\r\n        else {\r\n            this.ExcludeFiles = excludeFiles;\r\n        }\r\n    }\r\n    /**\r\n     * Returns the config in a prettified readable string.\r\n     */\r\n    ToString() {\r\n        let output = '';\r\n        output += `\\tSource: ${this.Source}\\n`;\r\n        output += `\\tFileTypes: ${this.FileTypes}\\n`;\r\n        output += `\\tExcludeFolders: ${this.ExcludeFolders}\\n`;\r\n        output += `\\tExcludeFiles: ${this.ExcludeFiles}\\n`;\r\n        for (const target of this.Targets) {\r\n            output += `\\tTarget: ${target.Path} | Ext: ${target.Extension}\\n`;\r\n        }\r\n        return output;\r\n    }\r\n    /**\r\n     * Checks if the path starts with ./\r\n     */\r\n    PathStartRelative(path) {\r\n        const startOfLine = /^\\.\\//gm;\r\n        return startOfLine.exec(path) !== null;\r\n    }\r\n    /**\r\n     * Checks if the path ends with /\r\n     */\r\n    PathEndWithSlash(path) {\r\n        const endOfLine = /.*\\/$/gm;\r\n        return endOfLine.exec(path) !== null;\r\n    }\r\n    FileTypeValidation(fileTypes) {\r\n        if (fileTypes === null || fileTypes === undefined) {\r\n            throw new Error('FileTypes must be a valid array');\r\n        }\r\n        for (const fileType of fileTypes) {\r\n            if (fileType === undefined || fileType === null || fileType === '') {\r\n                throw new Error('Filetype not a valid string');\r\n            }\r\n        }\r\n    }\r\n    GetSupportedFormats() {\r\n        const formats = [];\r\n        const formatContent = fs_1.readFileSync('./src/SupportedFormats.json', { encoding: 'utf-8' });\r\n        if (formatContent === undefined || formatContent === '')\r\n            throw new Error('Invalid Supported format document');\r\n        const supportedFormats = JSON.parse(formatContent);\r\n        if (supportedFormats === undefined)\r\n            throw new Error('Invalid format in SupportedFormats.json');\r\n        if (supportedFormats.length <= 0)\r\n            throw new Error('No supported formats found in SupportedFormats.json');\r\n        for (const formatData of supportedFormats) {\r\n            formats.push({\r\n                Extension: formatData.Extension,\r\n                Pattern: new RegExp(formatData.Pattern, 'gm')\r\n            });\r\n        }\r\n        return formats;\r\n    }\r\n}\r\nexports.Config = Config;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CrossReferencer = void 0;\r\nclass CrossReferencer {\r\n    constructor(sourceData, targetData) {\r\n        this.MissingFromTargets = [];\r\n        this.MissingFromSource = [];\r\n        // const clonedSource = [...sourceData];\r\n        const clonedTarget = [...targetData];\r\n        for (const source of sourceData) {\r\n            let matchesCount = 0;\r\n            const missingFromTarget = [];\r\n            for (const clonedTargetData of clonedTarget) {\r\n                const match = clonedTargetData.Data.find(e => e.Details.SourcePath === source.SourcePath);\r\n                if (match !== undefined) {\r\n                    // Add to the match count\r\n                    matchesCount++;\r\n                    // Remove element from the target data list\r\n                    clonedTargetData.Data.splice(clonedTargetData.Data.indexOf(match), 1);\r\n                }\r\n                else {\r\n                    missingFromTarget.push(clonedTargetData.Target);\r\n                }\r\n            }\r\n            // If we find that this source was present in all targets, we can remove it from the list\r\n            if (matchesCount === targetData.length) {\r\n                // Do nothing, it is present in all targets\r\n            }\r\n            else if (matchesCount === 0) {\r\n                // not present in any targets\r\n                this.MissingFromTargets.push({ Path: source.SourcePath, MissingTargets: targetData.map(e => e.Target) });\r\n            }\r\n            else {\r\n                // File present in some, but not all targets\r\n                this.MissingFromTargets.push({ Path: source.SourcePath, MissingTargets: missingFromTarget });\r\n            }\r\n        }\r\n        for (const target of clonedTarget) {\r\n            for (const data of target.Data) {\r\n                this.MissingFromSource.push({\r\n                    Path: data.Details.SourcePath,\r\n                    InTarget: data.ParentFile.Path,\r\n                    Line: data.LineNr\r\n                });\r\n            }\r\n        }\r\n        this.HasIssues = this.MissingFromTargets.length + this.MissingFromSource.length > 0;\r\n    }\r\n}\r\nexports.CrossReferencer = CrossReferencer;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SourceDataCollector = void 0;\r\nconst fs_1 = require(\"fs\");\r\nconst FileDetails_1 = require(\"../FileDetails\");\r\nconst InclusionController_1 = require(\"../InclusionController\");\r\nclass SourceDataCollector {\r\n    constructor(config) {\r\n        this.FileDetails = this.GetSourceData(config.Source, config);\r\n        // console.log(`Found ${this.FileDetails.length} entries in ${config.Source}`);\r\n    }\r\n    GetSourceData(path, config) {\r\n        let files = [];\r\n        const dirs = fs_1.readdirSync(path, { withFileTypes: true });\r\n        for (const element of dirs) {\r\n            if (element.isDirectory()) {\r\n                if (InclusionController_1.IncludeFolder(path + element.name, config)) {\r\n                    files = files.concat(this.GetSourceData(`${path}${element.name}/`, config));\r\n                }\r\n                else {\r\n                    // console.log(`Folder excluded: ${path}${element.name}`);\r\n                }\r\n            }\r\n            else {\r\n                const fileDetails = new FileDetails_1.FileDetails(path + element.name);\r\n                // Only check files that are whitelisted and not excluded\r\n                if (InclusionController_1.IncludeFile(fileDetails, config)) {\r\n                    files.push(fileDetails);\r\n                }\r\n            }\r\n        }\r\n        return files;\r\n    }\r\n}\r\nexports.SourceDataCollector = SourceDataCollector;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TargetDataCollector = void 0;\r\nconst FileDetails_1 = require(\"../FileDetails\");\r\nconst InclusionController_1 = require(\"../InclusionController\");\r\nconst IoOperations_1 = require(\"../IoOperations\");\r\nclass TargetDataCollector {\r\n    constructor(config) {\r\n        this.TargetData = [];\r\n        for (const target of config.Targets) {\r\n            const data = this.GetTargetData(target, config);\r\n            if (data.length >= 0) {\r\n                // console.log(`Found ${data.length} entries in ${target.Path}`);\r\n                this.TargetData.push({ Target: target.Path, Data: data });\r\n            }\r\n        }\r\n    }\r\n    GetTargetData(target, config) {\r\n        // console.log(`Getting data from: ${target.Path}`);\r\n        const output = [];\r\n        // Read the contents of the file\r\n        const content = IoOperations_1.ReadFileFromPath(target.Path);\r\n        if (content.length <= 0)\r\n            return [];\r\n        const preProcessor = [];\r\n        const matches = content.matchAll(target.Pattern);\r\n        for (const match of matches) {\r\n            if (match.index === undefined) {\r\n                console.warn('Could not index of match. Something is wrong somewhere');\r\n            }\r\n            else {\r\n                // TODO: There may be an issue with the markdown pattern, not collecting all links in document (early in document)\r\n                // console.log(`Orig: ${match[0]} | Link: ${match[1]}`);\r\n                preProcessor.push({ Orig: match[0], Link: match[1], Target: target, Line: GetLineNr(content, match.index) });\r\n            }\r\n        }\r\n        for (const data of preProcessor) {\r\n            if (!ExcludeLink(data.Link)) {\r\n                const rootPath = GetRootPath(data.Target.Path, data.Link);\r\n                if (!InclusionController_1.ExcludeFile(rootPath, config.ExcludeFiles, config.ExcludeFolders)) {\r\n                    output.push({\r\n                        Details: new FileDetails_1.FileDetails(rootPath),\r\n                        RelativePath: data.Link,\r\n                        OriginalMatch: data.Orig,\r\n                        ParentFile: data.Target,\r\n                        LineNr: data.Line\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n}\r\nexports.TargetDataCollector = TargetDataCollector;\r\nfunction ExcludeLink(link) {\r\n    // Exclude comments\r\n    const tomlComment = /^#/gm;\r\n    const tomlRes = tomlComment.exec(link);\r\n    if (tomlRes !== null)\r\n        return true;\r\n    // Exclude external links\r\n    const webLinks = /^https*:\\/\\//gm;\r\n    const webResult = webLinks.exec(link);\r\n    if (webResult !== null)\r\n        return true;\r\n    return false;\r\n}\r\nfunction GetLineNr(content, charIndex) {\r\n    const subString = content.substring(0, charIndex);\r\n    return subString.split('\\n').length;\r\n}\r\nfunction GetRootPath(targetPath, filePath) {\r\n    // Source goes from root -> document\r\n    // Target goes from document -> file\r\n    const targetPattern = /^(.+\\/)/gm;\r\n    const rootToTarget = Array.from(targetPath.matchAll(targetPattern))[0][1];\r\n    // If prefixed with './' remove it.\r\n    const filePattern = /^(.\\/)*(.*)$/gm;\r\n    const TargetToFile = Array.from(filePath.matchAll(filePattern))[0][2];\r\n    return `${rootToTarget}${TargetToFile}`;\r\n}\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.defaultTargets = exports.defaultExcludeFolders = exports.defaultExcludeFiles = exports.defaultFileTypes = exports.defaultSource = void 0;\r\nexports.defaultSource = './__tests__/testData/examples/';\r\nexports.defaultFileTypes = ['rs'];\r\nexports.defaultExcludeFiles = [];\r\nexports.defaultExcludeFolders = ['./__tests__/testData/examples/ios'];\r\nexports.defaultTargets = ['./__tests__/testData/examples/README.md', './__tests__/testData/Cargo.toml'];\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FileDetails = void 0;\r\nclass FileDetails {\r\n    constructor(path) {\r\n        this.SourcePath = path;\r\n        this.FileName = this.GetFileName(path);\r\n        this.Extension = this.GetFileExtension(path);\r\n        this.Path = this.GetPathToFile(path);\r\n    }\r\n    GetPathToFile(path) {\r\n        /* eslint-disable no-useless-escape */\r\n        const regex = /^(.+\\/)*([^\\/]+)*$/gm;\r\n        /* eslint-enable no-useless-escape */\r\n        const result = regex.exec(path);\r\n        if (result !== null && result !== undefined && result.length > 0) {\r\n            return result[1];\r\n        }\r\n        return '';\r\n    }\r\n    GetFileName(path) {\r\n        /* eslint-disable no-useless-escape */\r\n        const regex = /^(.+\\/)*([^\\/]+)*$/gm;\r\n        /* eslint-enable no-useless-escape */\r\n        const result = regex.exec(path);\r\n        if (result !== null && result !== undefined && result.length > 0) {\r\n            return result[2];\r\n        }\r\n        return '';\r\n    }\r\n    GetFileExtension(path) {\r\n        const regex = /(?:\\.([^.]+))?$/; // Capture file extensions\r\n        const result = regex.exec(path);\r\n        if (result !== null && result !== undefined && result.length > 0) {\r\n            return result[1];\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    }\r\n}\r\nexports.FileDetails = FileDetails;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ExcludeFile = exports.IncludeFolder = exports.IncludeFile = void 0;\r\nfunction IncludeFile(fileDetails, config) {\r\n    return !ExcludeFile(fileDetails.SourcePath, config.ExcludeFiles, config.ExcludeFolders) && WhitelistedType(fileDetails.Extension, config.FileTypes);\r\n}\r\nexports.IncludeFile = IncludeFile;\r\nfunction IncludeFolder(path, config) {\r\n    return !ExcludeDirectory(path, config.ExcludeFolders);\r\n}\r\nexports.IncludeFolder = IncludeFolder;\r\nfunction WhitelistedType(extension, types) {\r\n    if (types.length < 1)\r\n        return true;\r\n    return types.some(e => e === extension);\r\n}\r\nfunction ExcludeFile(filePath, excludeFiles, excludeDirs) {\r\n    const excludeByDir = excludeDirs.some(dir => filePath.includes(dir));\r\n    const excludeByFile = excludeFiles.some(e => e === filePath);\r\n    return excludeByDir || excludeByFile;\r\n}\r\nexports.ExcludeFile = ExcludeFile;\r\nfunction ExcludeDirectory(dirPath, excludeDirs) {\r\n    return excludeDirs.some(e => e === dirPath);\r\n}\r\n","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ParseTargets = exports.ParseInputArray = exports.ParseInput = void 0;\r\nconst core = __importStar(require(\"@actions/core\"));\r\nfunction ParseInput(inputName) {\r\n    const input = core.getInput(inputName);\r\n    if (input === undefined || input === '') {\r\n        // core.setFailed(`Config Error: Unable to get array input ${inputName}`);\r\n        // console.log(`Config Error: Unable to get config input ${inputName}`); // Using defaults\r\n        return undefined;\r\n    }\r\n    else {\r\n        return input;\r\n    }\r\n}\r\nexports.ParseInput = ParseInput;\r\nfunction ParseInputArray(inputName) {\r\n    let result;\r\n    const input = ParseInput(inputName);\r\n    if (input === undefined)\r\n        return undefined;\r\n    try {\r\n        result = JSON.parse(input);\r\n        return result;\r\n    }\r\n    catch (_a) {\r\n        core.setFailed(`Config Error: Unable to parse array input ${inputName}`);\r\n        return undefined;\r\n    }\r\n}\r\nexports.ParseInputArray = ParseInputArray;\r\nfunction ParseTargets(inputName) {\r\n    let result;\r\n    const input = ParseInput(inputName);\r\n    if (input === undefined)\r\n        return undefined;\r\n    try {\r\n        result = JSON.parse(input);\r\n        return result;\r\n    }\r\n    catch (_a) {\r\n        core.setFailed(`Config Error: Unable to parse target array input ${inputName}`);\r\n        return undefined;\r\n    }\r\n}\r\nexports.ParseTargets = ParseTargets;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ReadFileFromPath = exports.IsValidPath = void 0;\r\nconst fs_1 = require(\"fs\");\r\nfunction IsValidPath(path) {\r\n    return fs_1.existsSync(path);\r\n}\r\nexports.IsValidPath = IsValidPath;\r\nfunction ReadFileFromPath(path) {\r\n    if (!fs_1.existsSync(path))\r\n        throw new Error('Invalid Path');\r\n    return fs_1.readFileSync(path, { encoding: 'utf8' });\r\n}\r\nexports.ReadFileFromPath = ReadFileFromPath;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.IssueLogger = void 0;\r\nclass IssueLogger {\r\n    constructor(sourceIssues, targetIssues) {\r\n        this.issueIter = 1;\r\n        this.IssueCount = sourceIssues.length + targetIssues.length;\r\n        this.TargetIssueOutput = '';\r\n        this.SourceIssueOutput = '';\r\n        if (targetIssues.length > 0) {\r\n            this.TargetIssueOutput += `Links was found in document(s) but does not point to a valid file:\\n`;\r\n            for (const issue of targetIssues) {\r\n                this.TargetIssueOutput += `\\n${this.GetIssueNumber()} Link: ${issue.Path}\\n\\tDoes not lead to a valid file. Found in document: \\n\\t${issue.InTarget} : Line: ${issue.Line}\\n`;\r\n            }\r\n            this.TargetIssueOutput += '\\nPlease fix any typos in the link, or remove the link from the document(s).';\r\n        }\r\n        if (sourceIssues.length > 0) {\r\n            this.SourceIssueOutput += `Following files in folders was not found linked in document(s):\\n`;\r\n            for (const issue of sourceIssues) {\r\n                this.SourceIssueOutput += `\\n${this.GetIssueNumber()} File: ${issue.Path} \\n\\tIs missing from following document(s):`;\r\n                for (const missingTarget of issue.MissingTargets) {\r\n                    this.SourceIssueOutput += `\\n\\t\\t${missingTarget}`;\r\n                }\r\n                this.SourceIssueOutput += `\\n`;\r\n            }\r\n            this.SourceIssueOutput += `\\nPlease add them to the documents listed or remove them from folders.`;\r\n        }\r\n    }\r\n    PrintIssues() {\r\n        if (this.TargetIssueOutput === '' && this.SourceIssueOutput === '') {\r\n            return;\r\n        }\r\n        console.error(`▼ ▼ ▼ ▼ ${this.IssueCount} issues needs to be fixed ▼ ▼ ▼`);\r\n        // console.log('\\n');\r\n        console.error(this.TargetIssueOutput);\r\n        console.log('\\n');\r\n        console.error(this.SourceIssueOutput);\r\n        // console.log('\\n');\r\n        console.error('▲ ▲ ▲ ▲ ▲ ▲ ▲ End of issues ▲ ▲ ▲ ▲ ▲ ▲ ▲');\r\n    }\r\n    GetIssueNumber() {\r\n        return `[${this.issueIter++}/${this.IssueCount}] =>`;\r\n    }\r\n}\r\nexports.IssueLogger = IssueLogger;\r\n","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// eslint:disable: no-console\r\nconst core = __importStar(require(\"@actions/core\"));\r\n// const github = require('@actions/github');\r\nconst Setup_1 = require(\"./Setup\");\r\nconst SourceData_1 = require(\"./DataCollection/SourceData\");\r\nconst TargetData_1 = require(\"./DataCollection/TargetData\");\r\nconst CrossReferencer_1 = require(\"./CrossReferencer\");\r\nconst IssueLogger_1 = require(\"./IssueLogger\");\r\nfunction run() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            console.log('======= Running internal link consistency check =======');\r\n            const config = new Setup_1.Setup().Config;\r\n            console.log(`Running job with config: \\n${config.ToString()}`);\r\n            // console.log('======= Getting source data =======');\r\n            const sourceData = new SourceData_1.SourceDataCollector(config).FileDetails;\r\n            if (sourceData.length <= 0) {\r\n                core.setFailed('Found no entries in source');\r\n            }\r\n            // console.log('======= Getting target data =======');\r\n            const targetData = new TargetData_1.TargetDataCollector(config).TargetData;\r\n            if (targetData.length <= 0) {\r\n                core.setFailed('Found no entries in target(s)');\r\n            }\r\n            // console.log('======= Cross referencing issues =======');\r\n            const crossChecker = new CrossReferencer_1.CrossReferencer(sourceData, targetData);\r\n            if (crossChecker.HasIssues) {\r\n                const output = new IssueLogger_1.IssueLogger(crossChecker.MissingFromTargets, crossChecker.MissingFromSource);\r\n                // core.setOutput('SourceIssues', output.SourceIssueOutput);\r\n                output.PrintIssues();\r\n                core.setFailed('Cross referencing found issues, see output log to fix them');\r\n            }\r\n            else {\r\n                console.log('All checks passes :D');\r\n            }\r\n        }\r\n        catch (error) {\r\n            core.setFailed(error.message);\r\n        }\r\n    });\r\n}\r\n// eslint:enable: no-console\r\nrun();\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Setup = void 0;\r\nconst Config_1 = require(\"./Config\");\r\nconst Defaults_1 = require(\"./Defaults\");\r\nconst InputParser_1 = require(\"./InputParser\");\r\nclass Setup {\r\n    constructor() {\r\n        var _a, _b, _c, _d, _e;\r\n        // console.log('======= Retrieve inputs =======');\r\n        const source = (_a = InputParser_1.ParseInput('source')) !== null && _a !== void 0 ? _a : Defaults_1.defaultSource;\r\n        const fileTypes = (_b = InputParser_1.ParseInputArray('file-types')) !== null && _b !== void 0 ? _b : Defaults_1.defaultFileTypes;\r\n        const excludeFolders = (_c = InputParser_1.ParseInputArray('exclude-folders')) !== null && _c !== void 0 ? _c : Defaults_1.defaultExcludeFolders;\r\n        const excludeFiles = (_d = InputParser_1.ParseInputArray('exclude-files')) !== null && _d !== void 0 ? _d : Defaults_1.defaultExcludeFiles;\r\n        const targets = (_e = InputParser_1.ParseTargets('targets')) !== null && _e !== void 0 ? _e : Defaults_1.defaultTargets;\r\n        this.Config = new Config_1.Config(source, targets, fileTypes, excludeFolders, excludeFiles);\r\n    }\r\n}\r\nexports.Setup = Setup;\r\n","module.exports = require(\"fs\");;","module.exports = require(\"os\");;","module.exports = require(\"path\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\n__webpack_require__.ab = __dirname + \"/\";","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(979);\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AC9OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACnnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACfpBA;AACA;A;;;;;ACDA;AACA;A;;;;;ACDA;AACA;A;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC5BA;AACA;ACDA;AACA;AACA;AACA;;A","sourceRoot":""}