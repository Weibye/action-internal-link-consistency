{"version":3,"file":"index.js","sources":["../webpack://action-internal-link-consistency/./node_modules/@actions/core/lib/command.js","../webpack://action-internal-link-consistency/./node_modules/@actions/core/lib/core.js","../webpack://action-internal-link-consistency/./node_modules/@actions/core/lib/file-command.js","../webpack://action-internal-link-consistency/./node_modules/@actions/core/lib/utils.js","../webpack://action-internal-link-consistency/./src/Config.ts","../webpack://action-internal-link-consistency/./src/CrossReferencer.ts","../webpack://action-internal-link-consistency/./src/DataCollection/SourceData.ts","../webpack://action-internal-link-consistency/./src/DataCollection/TargetData.ts","../webpack://action-internal-link-consistency/./src/Defaults.ts","../webpack://action-internal-link-consistency/./src/FileDetails.ts","../webpack://action-internal-link-consistency/./src/InclusionController.ts","../webpack://action-internal-link-consistency/./src/InputParser.ts","../webpack://action-internal-link-consistency/./src/IoOperations.ts","../webpack://action-internal-link-consistency/./src/IssueLogger.ts","../webpack://action-internal-link-consistency/./src/Main.ts","../webpack://action-internal-link-consistency/./src/Setup.ts","../webpack://action-internal-link-consistency/external \"fs\"","../webpack://action-internal-link-consistency/external \"os\"","../webpack://action-internal-link-consistency/external \"path\"","../webpack://action-internal-link-consistency/webpack/bootstrap","../webpack://action-internal-link-consistency/webpack/runtime/compat","../webpack://action-internal-link-consistency/webpack/startup"],"sourcesContent":["\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nfunction issueCommand(command, properties, message) {\n    const cmd = new Command(command, properties, message);\n    process.stdout.write(cmd.toString() + os.EOL);\n}\nexports.issueCommand = issueCommand;\nfunction issue(name, message = '') {\n    issueCommand(name, {}, message);\n}\nexports.issue = issue;\nconst CMD_STRING = '::';\nclass Command {\n    constructor(command, properties, message) {\n        if (!command) {\n            command = 'missing.command';\n        }\n        this.command = command;\n        this.properties = properties;\n        this.message = message;\n    }\n    toString() {\n        let cmdStr = CMD_STRING + this.command;\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' ';\n            let first = true;\n            for (const key in this.properties) {\n                if (this.properties.hasOwnProperty(key)) {\n                    const val = this.properties[key];\n                    if (val) {\n                        if (first) {\n                            first = false;\n                        }\n                        else {\n                            cmdStr += ',';\n                        }\n                        cmdStr += `${key}=${escapeProperty(val)}`;\n                    }\n                }\n            }\n        }\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;\n        return cmdStr;\n    }\n}\nfunction escapeData(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A');\n}\nfunction escapeProperty(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A')\n        .replace(/:/g, '%3A')\n        .replace(/,/g, '%2C');\n}\n//# sourceMappingURL=command.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"./command\");\nconst file_command_1 = require(\"./file-command\");\nconst utils_1 = require(\"./utils\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\n/**\n * The code to exit an action\n */\nvar ExitCode;\n(function (ExitCode) {\n    /**\n     * A code indicating that the action was successful\n     */\n    ExitCode[ExitCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * A code indicating that the action was a failure\n     */\n    ExitCode[ExitCode[\"Failure\"] = 1] = \"Failure\";\n})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));\n//-----------------------------------------------------------------------\n// Variables\n//-----------------------------------------------------------------------\n/**\n * Sets env variable for this action and future actions in the job\n * @param name the name of the variable to set\n * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction exportVariable(name, val) {\n    const convertedVal = utils_1.toCommandValue(val);\n    process.env[name] = convertedVal;\n    const filePath = process.env['GITHUB_ENV'] || '';\n    if (filePath) {\n        const delimiter = '_GitHubActionsFileCommandDelimeter_';\n        const commandValue = `${name}<<${delimiter}${os.EOL}${convertedVal}${os.EOL}${delimiter}`;\n        file_command_1.issueCommand('ENV', commandValue);\n    }\n    else {\n        command_1.issueCommand('set-env', { name }, convertedVal);\n    }\n}\nexports.exportVariable = exportVariable;\n/**\n * Registers a secret which will get masked from logs\n * @param secret value of the secret\n */\nfunction setSecret(secret) {\n    command_1.issueCommand('add-mask', {}, secret);\n}\nexports.setSecret = setSecret;\n/**\n * Prepends inputPath to the PATH (for this action and future actions)\n * @param inputPath\n */\nfunction addPath(inputPath) {\n    const filePath = process.env['GITHUB_PATH'] || '';\n    if (filePath) {\n        file_command_1.issueCommand('PATH', inputPath);\n    }\n    else {\n        command_1.issueCommand('add-path', {}, inputPath);\n    }\n    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;\n}\nexports.addPath = addPath;\n/**\n * Gets the value of an input.  The value is also trimmed.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string\n */\nfunction getInput(name, options) {\n    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';\n    if (options && options.required && !val) {\n        throw new Error(`Input required and not supplied: ${name}`);\n    }\n    return val.trim();\n}\nexports.getInput = getInput;\n/**\n * Sets the value of an output.\n *\n * @param     name     name of the output to set\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setOutput(name, value) {\n    command_1.issueCommand('set-output', { name }, value);\n}\nexports.setOutput = setOutput;\n/**\n * Enables or disables the echoing of commands into stdout for the rest of the step.\n * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.\n *\n */\nfunction setCommandEcho(enabled) {\n    command_1.issue('echo', enabled ? 'on' : 'off');\n}\nexports.setCommandEcho = setCommandEcho;\n//-----------------------------------------------------------------------\n// Results\n//-----------------------------------------------------------------------\n/**\n * Sets the action status to failed.\n * When the action exits it will be with an exit code of 1\n * @param message add error issue message\n */\nfunction setFailed(message) {\n    process.exitCode = ExitCode.Failure;\n    error(message);\n}\nexports.setFailed = setFailed;\n//-----------------------------------------------------------------------\n// Logging Commands\n//-----------------------------------------------------------------------\n/**\n * Gets whether Actions Step Debug is on or not\n */\nfunction isDebug() {\n    return process.env['RUNNER_DEBUG'] === '1';\n}\nexports.isDebug = isDebug;\n/**\n * Writes debug message to user log\n * @param message debug message\n */\nfunction debug(message) {\n    command_1.issueCommand('debug', {}, message);\n}\nexports.debug = debug;\n/**\n * Adds an error issue\n * @param message error issue message. Errors will be converted to string via toString()\n */\nfunction error(message) {\n    command_1.issue('error', message instanceof Error ? message.toString() : message);\n}\nexports.error = error;\n/**\n * Adds an warning issue\n * @param message warning issue message. Errors will be converted to string via toString()\n */\nfunction warning(message) {\n    command_1.issue('warning', message instanceof Error ? message.toString() : message);\n}\nexports.warning = warning;\n/**\n * Writes info to log with console.log.\n * @param message info message\n */\nfunction info(message) {\n    process.stdout.write(message + os.EOL);\n}\nexports.info = info;\n/**\n * Begin an output group.\n *\n * Output until the next `groupEnd` will be foldable in this group\n *\n * @param name The name of the output group\n */\nfunction startGroup(name) {\n    command_1.issue('group', name);\n}\nexports.startGroup = startGroup;\n/**\n * End an output group.\n */\nfunction endGroup() {\n    command_1.issue('endgroup');\n}\nexports.endGroup = endGroup;\n/**\n * Wrap an asynchronous function call in a group.\n *\n * Returns the same type as the function itself.\n *\n * @param name The name of the group\n * @param fn The function to wrap in the group\n */\nfunction group(name, fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n        startGroup(name);\n        let result;\n        try {\n            result = yield fn();\n        }\n        finally {\n            endGroup();\n        }\n        return result;\n    });\n}\nexports.group = group;\n//-----------------------------------------------------------------------\n// Wrapper action state\n//-----------------------------------------------------------------------\n/**\n * Saves state for current action, the state can only be retrieved by this action's post job execution.\n *\n * @param     name     name of the state to store\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction saveState(name, value) {\n    command_1.issueCommand('save-state', { name }, value);\n}\nexports.saveState = saveState;\n/**\n * Gets the value of an state set by this action's main execution.\n *\n * @param     name     name of the state to get\n * @returns   string\n */\nfunction getState(name) {\n    return process.env[`STATE_${name}`] || '';\n}\nexports.getState = getState;\n//# sourceMappingURL=core.js.map","\"use strict\";\n// For internal use, subject to change.\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\nfunction issueCommand(command, message) {\n    const filePath = process.env[`GITHUB_${command}`];\n    if (!filePath) {\n        throw new Error(`Unable to find environment variable for file command ${command}`);\n    }\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Missing file at path: ${filePath}`);\n    }\n    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {\n        encoding: 'utf8'\n    });\n}\nexports.issueCommand = issueCommand;\n//# sourceMappingURL=file-command.js.map","\"use strict\";\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Sanitizes an input into a string so it can be passed into issueCommand safely\n * @param input input to sanitize into a string\n */\nfunction toCommandValue(input) {\n    if (input === null || input === undefined) {\n        return '';\n    }\n    else if (typeof input === 'string' || input instanceof String) {\n        return input;\n    }\n    return JSON.stringify(input);\n}\nexports.toCommandValue = toCommandValue;\n//# sourceMappingURL=utils.js.map","import { existsSync, readFileSync } from 'fs';\nimport { FileDetails } from './FileDetails';\nimport { ITarget, IRegFormat } from './Interfaces';\n\nexport class Config {\n    public Source: string;\n\n    public FileTypes: string[];\n    public SupportedFormats: IRegFormat[];\n\n    public ExcludeFolders: string[];\n    public ExcludeFiles: string[];\n    public Targets: ITarget[];\n\n    public constructor(source: string, targets: string[], fileTypes?: string[], excludeFolders?: string[], excludeFiles?: string[]) {\n        this.SupportedFormats = this.GetSupportedFormats();\n\n        // SOURCE\n        this.Source = this.SourceValidation(source);\n        // TARGETS\n        this.Targets = this.TargetValidation(targets);\n\n        this.FileTypes = fileTypes === undefined ? [] : this.FileTypeValidation(fileTypes);\n        this.ExcludeFolders = excludeFolders === undefined ? [] : this.ExcludeFoldersValidation(excludeFolders);\n        this.ExcludeFiles = excludeFiles === undefined ? [] : this.ExcludeFilesValidation(excludeFiles);\n    }\n\n    /**\n     * Returns the config in a prettified readable string.\n     */\n    public ToString(): string {\n        let output = '';\n        output += `\\tSource: ${this.Source}\\n`;\n        output += `\\tFileTypes: ${this.FileTypes}\\n`;\n        output += `\\tExcludeFolders: ${this.ExcludeFolders}\\n`;\n        output += `\\tExcludeFiles: ${this.ExcludeFiles}\\n`;\n        for (const target of this.Targets) {\n            output += `\\tTarget: ${target.Path} | Ext: ${target.Extension}\\n`;\n        }\n        return output;\n    }\n\n    /**\n     * Checks if the path starts with ./\n     */\n    private PathStartRelative(path: string): boolean {\n        const startOfLine = /^\\.\\//gm;\n        return startOfLine.exec(path) !== null;\n    }\n\n    /**\n     * Checks if the path ends with /\n     */\n    private PathEndWithSlash(path: string): boolean {\n        const endOfLine = /.*\\/$/gm;\n        return endOfLine.exec(path) !== null;\n    }\n\n    private PathStartWithDot(path: string): boolean {\n        const dotStart = /^\\./gm;\n        return dotStart.exec(path) !== null;\n    }\n\n    private SourceValidation(path: string): string {\n        if (path === '' || path === null || path === undefined) {\n            throw new Error('[Config]: Source path must be a valid string');\n        }\n        // must start with ./\n        if (!this.PathStartRelative(path)) {\n            throw new Error('[Config]: Source path must start with \"./\"');\n        }\n        // must end with /\n        if (!this.PathEndWithSlash(path)) {\n            throw new Error('[Config]: Source path must end with \"/\"');\n        }\n\n        if (!existsSync(path)) {\n            throw new Error(`Config error: Source directory does not exist / not found`);\n        }\n\n        return path;\n    }\n\n    private TargetValidation(paths: string[]): ITarget[] {\n        const targets: ITarget[] = [];\n        for (const targetPath of paths) {\n            if (targetPath === '' || targetPath === null || targetPath === undefined) {\n                throw new Error(`[Config]: Target path must be a valid string: ${targetPath}`);\n            }\n            if (!this.PathStartRelative(targetPath)) {\n                throw new Error(`[Config]: Target path must start with \"./\": ${targetPath}`);\n            }\n            if (this.PathEndWithSlash(targetPath)) {\n                throw new Error(`[Config]: Target path must not end with \"/\": ${targetPath}`);\n            }\n            if (!existsSync(targetPath)) {\n                throw new Error(`Config error: Target does not exist / not found: ${targetPath}`);\n            }\n            // Get filename / extension\n            const pathData = new FileDetails(targetPath);\n            const patternData = this.SupportedFormats.find(e => e.Extension === pathData.Extension);\n            if (patternData === undefined) {\n                console.log(this.SupportedFormats.map(e => e.Extension));\n                throw new Error(`[Config]: Target must be a supported document type: ${targetPath} | ${pathData.Extension}`);\n            }\n            targets.push({ Path: targetPath, Extension: patternData.Extension, Pattern: patternData.Pattern });\n        }\n        return targets;\n    }\n\n    private FileTypeValidation(fileTypes: string[]): string[] {\n        if (fileTypes === null || fileTypes === undefined) {\n            throw new Error('FileTypes must be a valid array');\n        }\n\n        for (const fileType of fileTypes) {\n            if (fileType === undefined || fileType === null || fileType === '') {\n                throw new Error('Filetype not a valid string');\n            }\n            if (this.PathStartWithDot(fileType)) {\n                throw new Error(`FileType ${fileType} should not start with .`);\n            }\n            if (this.PathEndWithSlash(fileType)) {\n                throw new Error(`FileType ${fileType} should not end with /`);\n            }\n        }\n        return fileTypes;\n    }\n\n    private ExcludeFoldersValidation(folderPaths: string[]): string[] {\n        if (folderPaths === null || folderPaths === undefined) {\n            throw new Error('ExcludeFolders must be a valid array');\n        }\n        for (const path of folderPaths) {\n            if (path === undefined || path === null || path === '') {\n                throw new Error('[Config]: ExcludeFolder path not a valid string');\n            }\n            if (!this.PathStartRelative(path)) {\n                throw new Error(`[Config]: ExcludeFolder path must start with \"./\": ${path}`);\n            }\n        }\n        return folderPaths;\n    }\n    private ExcludeFilesValidation(filePaths: string[]): string[] {\n        if (filePaths === null || filePaths === undefined) {\n            throw new Error('ExcludeFiles must be a valid array');\n        }\n        for (const path of filePaths) {\n            if (path === undefined || path === null || path === '') {\n                throw new Error('ExcludeFolder path not a valid string');\n            }\n            if (!this.PathStartRelative(path)) {\n                throw new Error(`[Config]: Target path must start with \"./\": ${path}`);\n            }\n            if (this.PathEndWithSlash(path)) {\n                throw new Error(`[Config]: Target path must not end with \"/\": ${path}`);\n            }\n        }\n        return filePaths;\n    }\n\n    private GetSupportedFormats(): IRegFormat[] {\n        const formats: IRegFormat[] = [];\n        const formatContent = readFileSync('./src/SupportedFormats.json', { encoding: 'utf-8' });\n        if (formatContent === undefined || formatContent === '') throw new Error('Invalid Supported format document');\n\n        const supportedFormats: [{ Extension: string; Pattern: string }] = JSON.parse(formatContent);\n        if (supportedFormats === undefined) throw new Error('Invalid format in SupportedFormats.json');\n        if (supportedFormats.length <= 0) throw new Error('No supported formats found in SupportedFormats.json');\n\n        for (const formatData of supportedFormats) {\n            formats.push({\n                Extension: formatData.Extension,\n                Pattern: new RegExp(formatData.Pattern, 'gm')\n            });\n        }\n        return formats;\n    }\n}\n","import { FileDetails } from './FileDetails';\nimport { ITargetOutput, IIssueNotInAll, IIssueNotInSource } from './Interfaces';\n\nexport class CrossReferencer {\n    // Rules:\n    // File should be present in all targets, or there should be created an issue of the appropriate type:\n\n    // Issue types:\n    // - Only found in no or some targets: Missing target: list\n    public MissingFromTargets: IIssueNotInAll[];\n    // - Found in target (target(s)) but not on disk\n    public MissingFromSource: IIssueNotInSource[];\n\n    public HasIssues: boolean;\n\n    public constructor(sourceData: FileDetails[], targetData: ITargetOutput[]) {\n        this.MissingFromTargets = [];\n        this.MissingFromSource = [];\n\n        // const clonedSource = [...sourceData];\n        const clonedTarget = [...targetData];\n\n        for (const source of sourceData) {\n            let matchesCount = 0;\n            const missingFromTarget: string[] = [];\n\n            for (const clonedTargetData of clonedTarget) {\n                const match = clonedTargetData.Data.find(e => e.Details.SourcePath === source.SourcePath);\n                if (match !== undefined) {\n                    // Add to the match count\n                    matchesCount++;\n                    // Remove element from the target data list\n                    clonedTargetData.Data.splice(clonedTargetData.Data.indexOf(match), 1);\n                } else {\n                    missingFromTarget.push(clonedTargetData.Target);\n                }\n            }\n            // If we find that this source was present in all targets, we can remove it from the list\n            if (matchesCount === targetData.length) {\n                // Do nothing, it is present in all targets\n            } else if (matchesCount === 0) {\n                // not present in any targets\n                this.MissingFromTargets.push({ Path: source.SourcePath, MissingTargets: targetData.map(e => e.Target) });\n            } else {\n                // File present in some, but not all targets\n                this.MissingFromTargets.push({ Path: source.SourcePath, MissingTargets: missingFromTarget });\n            }\n        }\n\n        for (const target of clonedTarget) {\n            for (const data of target.Data) {\n                this.MissingFromSource.push({\n                    Path: data.Details.SourcePath,\n                    InTarget: data.ParentFile.Path,\n                    Line: data.LineNr\n                });\n            }\n        }\n\n        this.HasIssues = this.MissingFromTargets.length + this.MissingFromSource.length > 0;\n    }\n}\n","import { Dirent, readdirSync } from 'fs';\nimport { Config } from '../Config';\nimport { FileDetails } from '../FileDetails';\nimport { IncludeFile, IncludeFolder } from '../InclusionController';\n\nexport class SourceDataCollector {\n    public FileDetails: FileDetails[];\n\n    public constructor(config: Config) {\n        this.FileDetails = this.GetSourceData(config.Source, config);\n        // console.log(`Found ${this.FileDetails.length} entries in ${config.Source}`);\n    }\n\n    private GetSourceData(path: string, config: Config): FileDetails[] {\n        let files: FileDetails[] = [];\n\n        const dirs: Dirent[] = readdirSync(path, { withFileTypes: true });\n\n        for (const element of dirs) {\n            if (element.isDirectory()) {\n                if (IncludeFolder(path + element.name, config)) {\n                    files = files.concat(this.GetSourceData(`${path}${element.name}/`, config));\n                } else {\n                    // console.log(`Folder excluded: ${path}${element.name}`);\n                }\n            } else {\n                const fileDetails = new FileDetails(path + element.name);\n                // Only check files that are whitelisted and not excluded\n                if (IncludeFile(fileDetails, config)) {\n                    files.push(fileDetails);\n                }\n            }\n        }\n\n        return files;\n    }\n}\n","// import { readFileSync } from 'fs';\nimport { Config } from '../Config';\nimport { FileDetails } from '../FileDetails';\nimport { ExcludeFile } from '../InclusionController';\nimport { ITarget, ITargetData, ITargetOutput } from '../Interfaces';\nimport { ReadFileFromPath } from '../IoOperations';\n\nexport class TargetDataCollector {\n    public TargetData: ITargetOutput[];\n\n    public constructor(config: Config) {\n        this.TargetData = [];\n\n        for (const target of config.Targets) {\n            const data = this.GetTargetData(target, config);\n            if (data.length >= 0) {\n                // console.log(`Found ${data.length} entries in ${target.Path}`);\n                this.TargetData.push({ Target: target.Path, Data: data });\n            }\n        }\n    }\n\n    private GetTargetData(target: ITarget, config: Config): ITargetData[] {\n        // console.log(`Getting data from: ${target.Path}`);\n        const output: ITargetData[] = [];\n\n        // Read the contents of the file\n        const content = ReadFileFromPath(target.Path);\n        if (content.length <= 0) return [];\n\n        const preProcessor: { Orig: string; Link: string; Target: ITarget; Line: number }[] = [];\n\n        const matches = content.matchAll(target.Pattern);\n        for (const match of matches) {\n            if (match.index === undefined) {\n                console.warn('Could not index of match. Something is wrong somewhere');\n            } else {\n                // TODO: There may be an issue with the markdown pattern, not collecting all links in document (early in document)\n                // console.log(`Orig: ${match[0]} | Link: ${match[1]}`);\n                preProcessor.push({ Orig: match[0], Link: match[1], Target: target, Line: GetLineNr(content, match.index) });\n            }\n        }\n\n        for (const data of preProcessor) {\n            if (!this.WebLink(data.Link) && !this.DocLink(data.Link)) {\n                const rootPath = GetRootPath(data.Target.Path, data.Link);\n                if (this.InTargetScope(rootPath, config.Source) && !ExcludeFile(rootPath, config.ExcludeFiles, config.ExcludeFolders)) {\n                    output.push({\n                        Details: new FileDetails(rootPath),\n                        RelativePath: data.Link,\n                        OriginalMatch: data.Orig,\n                        ParentFile: data.Target,\n                        LineNr: data.Line\n                    });\n                }\n            }\n        }\n        return output;\n    }\n\n    private InTargetScope(path: string, scope: string): boolean {\n        return path.includes(scope);\n    }\n\n    private WebLink(link: string): boolean {\n        const webLinks = /^https*:\\/\\//gm;\n        return webLinks.exec(link) !== null;\n    }\n\n    private DocLink(link: string): boolean {\n        const docLink = /^#/gm;\n        return docLink.exec(link) !== null;\n    }\n}\n\nfunction GetLineNr(content: string, charIndex: number): number {\n    const subString = content.substring(0, charIndex);\n    return subString.split('\\n').length;\n}\n\nfunction GetRootPath(targetPath: string, filePath: string): string {\n    // Source goes from root -> document\n    // Target goes from document -> file\n    const targetPattern = /^(.+\\/)/gm;\n    const rootToTarget = Array.from(targetPath.matchAll(targetPattern))[0][1];\n\n    // If prefixed with './' remove it.\n    const filePattern = /^(.\\/)*(.*)$/gm;\n    const TargetToFile = Array.from(filePath.matchAll(filePattern))[0][2];\n\n    return `${rootToTarget}${TargetToFile}`;\n}\n","export const defaultSource = './__tests__/data/source_data/';\nexport const defaultFileTypes = ['test'];\nexport const defaultExcludeFiles = ['./__tests__/data/source_data/should_be_ignored.test'];\nexport const defaultExcludeFolders = ['./__tests__/data/source_data/ignorefolder'];\nexport const defaultTargets = ['./__tests__/data/target_documents/toml/ValidToml.toml', './__tests__/data/target_documents/markdown/ValidReadme.md'];\n","export class FileDetails {\n    public Path: string;\n    public FileName: string;\n    public Extension: string;\n    public SourcePath: string;\n\n    public constructor(path: string) {\n        this.SourcePath = path;\n        this.FileName = this.GetFileName(path);\n        this.Extension = this.GetFileExtension(path);\n        this.Path = this.GetPathToFile(path);\n    }\n\n    public GetPathToFile(path: string): string {\n        /* eslint-disable no-useless-escape */\n        const regex = /^(.+\\/)*([^\\/]+)*$/gm;\n        /* eslint-enable no-useless-escape */\n        const result = regex.exec(path);\n        if (result !== null && result !== undefined && result.length > 0) {\n            return result[1];\n        }\n        return '';\n    }\n\n    public GetFileName(path: string): string {\n        /* eslint-disable no-useless-escape */\n        const regex = /^(.+\\/)*([^\\/]+)*$/gm;\n        /* eslint-enable no-useless-escape */\n        const result = regex.exec(path);\n        if (result !== null && result !== undefined && result.length > 0) {\n            return result[2];\n        }\n        return '';\n    }\n\n    public GetFileExtension(path: string): string {\n        const regex = /(?:\\.([^.]+))?$/; // Capture file extensions\n        const result = regex.exec(path);\n        if (result !== null && result !== undefined && result.length > 0) {\n            return result[1];\n        } else {\n            return '';\n        }\n    }\n}\n","import { Config } from './Config';\nimport { FileDetails } from './FileDetails';\n\nexport function IncludeFile(fileDetails: FileDetails, config: Config): boolean {\n    return !ExcludeFile(fileDetails.SourcePath, config.ExcludeFiles, config.ExcludeFolders) && WhitelistedType(fileDetails.Extension, config.FileTypes);\n}\n\nexport function IncludeFolder(path: string, config: Config): boolean {\n    return !ExcludeDirectory(path, config.ExcludeFolders);\n}\n\nfunction WhitelistedType(extension: string, types: string[]): boolean {\n    if (types.length < 1) return true;\n\n    return types.some(e => e === extension);\n}\n\nexport function ExcludeFile(filePath: string, excludeFiles: string[], excludeDirs: string[]): boolean {\n    const excludeByDir = excludeDirs.some(dir => filePath.includes(dir));\n    const excludeByFile = excludeFiles.some(e => e === filePath);\n\n    return excludeByDir || excludeByFile;\n}\n\nfunction ExcludeDirectory(dirPath: string, excludeDirs: string[]): boolean {\n    return excludeDirs.some(e => e === dirPath);\n}\n","import * as core from '@actions/core';\n\nexport function ParseInput(inputName: string): string | undefined {\n    const input = core.getInput(inputName);\n    if (input === undefined || input === '') {\n        // core.setFailed(`Config Error: Unable to get array input ${inputName}`);\n        // console.log(`Config Error: Unable to get config input ${inputName}`); // Using defaults\n        return undefined;\n    } else {\n        return input;\n    }\n}\n\nexport function ParseInputArray(inputName: string): string[] | undefined {\n    let result: string[];\n    const input = ParseInput(inputName);\n    if (input === undefined) return undefined;\n    try {\n        result = JSON.parse(input);\n        return result;\n    } catch {\n        core.setFailed(`Config Error: Unable to parse array input ${inputName}`);\n        return undefined;\n    }\n}\n\nexport function ParseTargets(inputName: string): string[] | undefined {\n    let result: string[];\n    const input = ParseInput(inputName);\n    if (input === undefined) return undefined;\n    try {\n        result = JSON.parse(input) as string[];\n        return result;\n    } catch {\n        core.setFailed(`Config Error: Unable to parse target array input ${inputName}`);\n        return undefined;\n    }\n}\n","import { readFileSync, existsSync } from 'fs';\n\nexport function IsValidPath(path: string): boolean {\n    return existsSync(path);\n}\n\nexport function ReadFileFromPath(path: string): string {\n    if (!existsSync(path)) throw new Error('Invalid Path');\n    return readFileSync(path, { encoding: 'utf8' });\n}\n","import { IIssueNotInAll, IIssueNotInSource } from './Interfaces';\n\nexport class IssueLogger {\n    public TargetIssueOutput: string;\n    public SourceIssueOutput: string;\n    public IssueCount: number;\n    private issueIter = 1;\n\n    public constructor(sourceIssues: IIssueNotInAll[], targetIssues: IIssueNotInSource[]) {\n        this.IssueCount = sourceIssues.length + targetIssues.length;\n        this.TargetIssueOutput = '';\n        this.SourceIssueOutput = '';\n\n        if (targetIssues.length > 0) {\n            this.TargetIssueOutput += `Links was found in document(s) but does not point to a valid file:\\n`;\n            for (const issue of targetIssues) {\n                this.TargetIssueOutput += `\\n${this.GetIssueNumber()} Link: ${issue.Path}\\n\\tDoes not lead to a valid file. Found in document: \\n\\t\\t${issue.InTarget} : Line: ${\n                    issue.Line\n                }\\n`;\n            }\n            this.TargetIssueOutput += '\\nPlease fix any typos in the link, or remove the link from the document(s).';\n        }\n\n        if (sourceIssues.length > 0) {\n            this.SourceIssueOutput += `Following files in folders was not found linked in document(s):\\n`;\n            for (const issue of sourceIssues) {\n                this.SourceIssueOutput += `\\n${this.GetIssueNumber()} File: ${issue.Path} \\n\\tIs missing from following document(s):`;\n                for (const missingTarget of issue.MissingTargets) {\n                    this.SourceIssueOutput += `\\n\\t\\t${missingTarget}`;\n                }\n                this.SourceIssueOutput += `\\n`;\n            }\n            this.SourceIssueOutput += `\\nPlease add them to the documents listed or remove them from folders.`;\n        }\n    }\n\n    public PrintIssues(): void {\n        if (this.TargetIssueOutput === '' && this.SourceIssueOutput === '') {\n            return;\n        }\n        console.error(`▼ ▼ ▼ ▼ ${this.IssueCount} issues needs to be fixed ▼ ▼ ▼\\\n            \\n${this.TargetIssueOutput}\\\n            \\n\\n${this.SourceIssueOutput}\\\n            \\n▲ ▲ ▲ ▲ ▲ ▲ ▲ End of issues ▲ ▲ ▲ ▲ ▲ ▲ ▲`);\n    }\n\n    private GetIssueNumber(): string {\n        return `[${this.issueIter++}/${this.IssueCount}] =>`;\n    }\n}\n","// eslint:disable: no-console\nimport * as core from '@actions/core';\n// const github = require('@actions/github');\nimport { Setup } from './Setup';\nimport { FileDetails } from './FileDetails';\nimport { SourceDataCollector } from './DataCollection/SourceData';\nimport { TargetDataCollector } from './DataCollection/TargetData';\nimport { ITargetOutput } from './Interfaces';\nimport { CrossReferencer } from './CrossReferencer';\nimport { IssueLogger } from './IssueLogger';\n\nasync function run(): Promise<void> {\n    try {\n        console.log('======= Running internal link consistency check =======');\n\n        const config = new Setup().Config;\n        console.log(`Running job with config: \\n${config.ToString()}`);\n\n        // console.log('======= Getting source data =======');\n        const sourceData: FileDetails[] = new SourceDataCollector(config).FileDetails;\n        if (sourceData.length <= 0) {\n            core.setFailed('Found no entries in source');\n        }\n\n        // console.log('======= Getting target data =======');\n        const targetData: ITargetOutput[] = new TargetDataCollector(config).TargetData;\n        if (targetData.length <= 0) {\n            core.setFailed('Found no entries in target(s)');\n        }\n\n        // console.log('======= Cross referencing issues =======');\n        const crossChecker = new CrossReferencer(sourceData, targetData);\n        if (crossChecker.HasIssues) {\n            const output = new IssueLogger(crossChecker.MissingFromTargets, crossChecker.MissingFromSource);\n            // core.setOutput('SourceIssues', output.SourceIssueOutput);\n            output.PrintIssues();\n            core.setFailed('✗ Cross referencing found issues, see output log to fix them');\n        } else {\n            console.log('✓ All checks passes.');\n        }\n    } catch (error) {\n        core.setFailed(error.message);\n    }\n}\n\n// eslint:enable: no-console\nrun();\n","import { Config } from './Config';\nimport { defaultExcludeFiles, defaultExcludeFolders, defaultFileTypes, defaultSource, defaultTargets } from './Defaults';\nimport { ParseInput, ParseInputArray, ParseTargets } from './InputParser';\n\nexport class Setup {\n    public Config: Config;\n\n    public constructor() {\n        // console.log('======= Retrieve inputs =======');\n        const source = ParseInput('source') ?? defaultSource;\n        const fileTypes = ParseInputArray('file-types') ?? defaultFileTypes;\n        const excludeFolders = ParseInputArray('exclude-folders') ?? defaultExcludeFolders;\n        const excludeFiles = ParseInputArray('exclude-files') ?? defaultExcludeFiles;\n\n        const targets: string[] = ParseTargets('targets') ?? defaultTargets;\n\n        this.Config = new Config(source, targets, fileTypes, excludeFolders, excludeFiles);\n    }\n}\n","module.exports = require(\"fs\");;","module.exports = require(\"os\");;","module.exports = require(\"path\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\n__webpack_require__.ab = __dirname + \"/\";","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(979);\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AC9OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;ACnlEA;AAoEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;A;;;;;;;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;ACNA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AA5CA;AACA;AACA;A;;;;;;;;ACCA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAXA;AACA;AACA;A;;;;;;;;AC5BA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AAHA;AACA;AACA;A;;;;;;;;ACNA;AAMA;AAFA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA/CA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;A;;;;;;;;AChDA;AACA;AACA;AAEA;AAGA;;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAdA;AACA;AACA;A;;;;;ACNA;AACA;A;;;;;ACDA;AACA;A;;;;;ACDA;AACA;A;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC5BA;AACA;ACDA;AACA;AACA;AACA;;A","sourceRoot":""}