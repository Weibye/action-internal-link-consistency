{"version":3,"file":"index.js","sources":["../webpack://example_checker/./lib/CargoExamples.js","../webpack://example_checker/./lib/DiskExamples.js","../webpack://example_checker/./lib/IoOperations.js","../webpack://example_checker/./lib/ReadmeExamples.js","../webpack://example_checker/./lib/main.js","../webpack://example_checker/./node_modules/@actions/core/lib/command.js","../webpack://example_checker/./node_modules/@actions/core/lib/core.js","../webpack://example_checker/./node_modules/@actions/core/lib/file-command.js","../webpack://example_checker/./node_modules/@actions/core/lib/utils.js","../webpack://example_checker/external \"fs\"","../webpack://example_checker/external \"os\"","../webpack://example_checker/external \"path\"","../webpack://example_checker/webpack/bootstrap","../webpack://example_checker/webpack/runtime/compat","../webpack://example_checker/webpack/startup"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GetExamplesFromCargo = void 0;\r\nconst IoOperations_1 = require(\"./IoOperations\");\r\nfunction GetExamplesFromCargo(path, ignoreFiles, ignoreFolders) {\r\n    const rawData = IoOperations_1.ReadFileFromPath(path);\r\n    const examplePattern = /(?<=\\[\\[example\\]\\]).+?name\\s=\\s\\\\\"(.+?)\\\\\".+?path\\s=\\s\\\\\"(.+?)\\\\\"/gm;\r\n    const matches = rawData.matchAll(examplePattern);\r\n    const outputData = [];\r\n    for (const match of matches) {\r\n        const file = match[2].split('/');\r\n        outputData.push({\r\n            name: match[1],\r\n            fileName: file[file.length - 1],\r\n            path: match[2]\r\n        });\r\n    }\r\n    return outputData;\r\n}\r\nexports.GetExamplesFromCargo = GetExamplesFromCargo;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GetExamplesFromDisk = void 0;\r\nconst fs_1 = require(\"fs\");\r\nfunction GetExamplesFromDisk(path, excludeFiles, excludeDirs) {\r\n    let filesInDirectories = [];\r\n    const dirs = fs_1.readdirSync(path, { withFileTypes: true });\r\n    for (const element of dirs) {\r\n        if (element.isDirectory()) {\r\n            if (excludeDirs.some(e => e === path + element.name)) {\r\n                console.log(`Folder excluded: ${path}${element.name}`);\r\n                continue;\r\n            }\r\n            filesInDirectories = filesInDirectories.concat(GetExamplesFromDisk(`${path}${element.name}/`, excludeFiles, excludeDirs));\r\n        }\r\n        else {\r\n            // Don't look for files that should be excluded\r\n            if (!excludeFiles.some(e => e === element.name)) {\r\n                // Make sure the file is an .rs file\r\n                const elementNameSplit = element.name.split('.');\r\n                if (elementNameSplit[elementNameSplit.length - 1] === 'rs') {\r\n                    const result = path.split('/');\r\n                    const name = elementNameSplit[0];\r\n                    const category = result[result.length - 2];\r\n                    const example = {\r\n                        name,\r\n                        fileName: element.name,\r\n                        path: path + element.name,\r\n                        category\r\n                    };\r\n                    filesInDirectories.push(example);\r\n                }\r\n            }\r\n            else {\r\n                console.log(`File excluded: ${path}${element.name}`);\r\n            }\r\n        }\r\n    }\r\n    return filesInDirectories;\r\n}\r\nexports.GetExamplesFromDisk = GetExamplesFromDisk;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ReadFileFromPath = exports.IsValidPath = void 0;\r\nconst fs_1 = require(\"fs\");\r\nfunction IsValidPath(path) {\r\n    return fs_1.existsSync(path);\r\n}\r\nexports.IsValidPath = IsValidPath;\r\nfunction ReadFileFromPath(path) {\r\n    const content = fs_1.readFileSync(path, { encoding: 'utf8' });\r\n    return JSON.stringify(content);\r\n}\r\nexports.ReadFileFromPath = ReadFileFromPath;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GetExamplesFromReadme = void 0;\r\nconst IoOperations_1 = require(\"./IoOperations\");\r\nfunction GetExamplesFromReadme(path, excludeFiles, excludeFolders) {\r\n    const output = [];\r\n    const pathElements = path.split('/');\r\n    let relativePath = '';\r\n    for (let index = 0; index < pathElements.length - 1; index++) {\r\n        relativePath += `${pathElements[index]}/`;\r\n    }\r\n    // console.log(relativePath);\r\n    const data = IoOperations_1.ReadFileFromPath(path);\r\n    const regex = /(?<=(E|e)xample\\s\\|\\s((F|f)ile|(M|m)ain)\\s\\|\\s(D|d)escription\\\\r\\\\n-{3}\\s\\|\\s-{3}\\s\\|\\s-{3}\\\\r\\\\n)(.*?)(?=\\\\r\\\\n\\\\r\\\\n#)/gm;\r\n    // Splits the README into sections based on the tables listing examples\r\n    const sections = [];\r\n    const sectionMatches = data.matchAll(regex);\r\n    for (const match of sectionMatches) {\r\n        sections.push(match[0]);\r\n    }\r\n    const sectionSplit = /\\\\r\\\\n/;\r\n    const sectionRegex = /`(.+?)`\\s\\|\\s.*?`(.+?)`.*\\((.+?)\\)\\s\\|\\s(.*?)$/gm;\r\n    // further parse the sections into individual examples\r\n    for (const section of sections) {\r\n        const splitStrings = section.split(sectionSplit);\r\n        for (const string of splitStrings) {\r\n            const result = string.matchAll(sectionRegex);\r\n            for (const exampleRawData of result) {\r\n                const filePath = exampleRawData[3].split('/');\r\n                // Ensure we construct an absolute path to the file\r\n                let absolutePath = relativePath;\r\n                for (let index = 1; index < filePath.length; index++) {\r\n                    absolutePath +=\r\n                        index === filePath.length - 1\r\n                            ? filePath[index]\r\n                            : `${filePath[index]}/`;\r\n                }\r\n                const example = {\r\n                    name: exampleRawData[1],\r\n                    fileName: filePath[filePath.length - 1],\r\n                    path: absolutePath,\r\n                    description: exampleRawData[4]\r\n                };\r\n                output.push(example);\r\n                // console.log(example);\r\n            }\r\n        }\r\n    }\r\n    return output;\r\n}\r\nexports.GetExamplesFromReadme = GetExamplesFromReadme;\r\n","\"use strict\";\r\n// eslint:disable: no-console\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst core = __importStar(require(\"@actions/core\"));\r\n// const github = require('@actions/github');\r\nconst CargoExamples_1 = require(\"./CargoExamples\");\r\nconst DiskExamples_1 = require(\"./DiskExamples\");\r\nconst IoOperations_1 = require(\"./IoOperations\");\r\nconst ReadmeExamples_1 = require(\"./ReadmeExamples\");\r\n// import { wait } from './wait'\r\n// Make sure all source files\r\n// Config\r\nconst sourcePath = '__tests__/testData/examples/';\r\nconst whiteListFileTypes = ['.rs']; // If this is empty, look for all files\r\nconst targetsPaths = [\r\n    '__tests__/testData/Cargo.toml',\r\n    '__tests__/testData/examples/README.md'\r\n];\r\nconst pathToReadme = `${sourcePath}README.md`;\r\nconst pathToCargo = 'Cargo.toml';\r\nconst foldersToExclude = [\r\n    '__tests__/testData/examples/ios/',\r\n    '__tests__/testData/examples/excludefolder/'\r\n];\r\nconst filesToExclude = ['lib.rs'];\r\n// Not needed when we move to target approach\r\nconst checkReadme = true;\r\nconst checkCargo = true;\r\nfunction run() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            console.log('Getting input');\r\n            console.log(`Source Path: ${core.getInput('source_path')}`);\r\n            console.log(`Target Path: ${core.getInput('target_paths')}`);\r\n            console.log('======= Starting Job =======');\r\n            if (!checkCargo && !checkReadme) {\r\n                core.setFailed('Error with configuration: Both Cargo and README checks are disabled meaning this script will do nothing. At least one should be enabled');\r\n                return;\r\n            }\r\n            // Check that the example directory exists\r\n            if (!IoOperations_1.IsValidPath(sourcePath)) {\r\n                core.setFailed(`Examples directory not found: ${sourcePath}`);\r\n                return;\r\n            }\r\n            // Check that the Cargo.toml exist\r\n            if (checkCargo && !IoOperations_1.IsValidPath(targetsPaths[0])) {\r\n                core.setFailed(`Cargo.toml not found: ${targetsPaths[0]}`);\r\n                return;\r\n            }\r\n            // Check that the readme exists\r\n            if (checkReadme && !IoOperations_1.IsValidPath(targetsPaths[1])) {\r\n                core.setFailed(`Examples README not found: ${targetsPaths[1]}`);\r\n                return;\r\n            }\r\n            // Collect the data from the various sources and normalize them for comparison\r\n            // Get examples from directories\r\n            console.log('======= DISK =======');\r\n            const diskExamples = DiskExamples_1.GetExamplesFromDisk(sourcePath, filesToExclude, foldersToExclude);\r\n            if (diskExamples.length > 0) {\r\n                console.log(`Found ${diskExamples.length} examples in ${sourcePath}`);\r\n                // for (const example of diskExamples) {\r\n                //     console.log(example);\r\n                // }\r\n            }\r\n            else {\r\n                core.setFailed('Found no examples on disk');\r\n            }\r\n            // Get examples listed in the Cargo.toml\r\n            console.log('======= CARGO =======');\r\n            const cargoExamples = checkCargo\r\n                ? CargoExamples_1.GetExamplesFromCargo(targetsPaths[0], filesToExclude, foldersToExclude)\r\n                : [];\r\n            if (cargoExamples.length > 0) {\r\n                console.log(`Found ${cargoExamples.length} examples in ${pathToCargo}`);\r\n                // for (const example of cargoExamples) {\r\n                //     console.log(example);\r\n                // }\r\n            }\r\n            else {\r\n                if (checkCargo)\r\n                    core.setFailed('Found no examples in Cargo.toml');\r\n            }\r\n            // Get examples listed in the README\r\n            console.log('======= README =======');\r\n            const readmeExamples = checkReadme\r\n                ? ReadmeExamples_1.GetExamplesFromReadme(targetsPaths[1], filesToExclude, foldersToExclude)\r\n                : [];\r\n            if (readmeExamples.length > 0) {\r\n                console.log(`Found ${readmeExamples.length} examples in ${pathToReadme}`);\r\n                // for (const example of readmeExamples) {\r\n                //     console.log(example);\r\n                // }\r\n            }\r\n            else {\r\n                if (checkReadme)\r\n                    core.setFailed('Found no examples in README');\r\n            }\r\n            // console.log(\"======= Cross referencing issues =======\");\r\n            // const issues = CrossReference(diskExamples, cargoExamples, readmeExamples);\r\n            // if (issues.length > 0) {\r\n            //     for (const issue of issues) {\r\n            //         console.log(issue);\r\n            //     }\r\n            // }\r\n        }\r\n        catch (error) {\r\n            core.setFailed(error.message);\r\n        }\r\n    });\r\n}\r\nrun();\r\n","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nfunction issueCommand(command, properties, message) {\n    const cmd = new Command(command, properties, message);\n    process.stdout.write(cmd.toString() + os.EOL);\n}\nexports.issueCommand = issueCommand;\nfunction issue(name, message = '') {\n    issueCommand(name, {}, message);\n}\nexports.issue = issue;\nconst CMD_STRING = '::';\nclass Command {\n    constructor(command, properties, message) {\n        if (!command) {\n            command = 'missing.command';\n        }\n        this.command = command;\n        this.properties = properties;\n        this.message = message;\n    }\n    toString() {\n        let cmdStr = CMD_STRING + this.command;\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' ';\n            let first = true;\n            for (const key in this.properties) {\n                if (this.properties.hasOwnProperty(key)) {\n                    const val = this.properties[key];\n                    if (val) {\n                        if (first) {\n                            first = false;\n                        }\n                        else {\n                            cmdStr += ',';\n                        }\n                        cmdStr += `${key}=${escapeProperty(val)}`;\n                    }\n                }\n            }\n        }\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;\n        return cmdStr;\n    }\n}\nfunction escapeData(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A');\n}\nfunction escapeProperty(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A')\n        .replace(/:/g, '%3A')\n        .replace(/,/g, '%2C');\n}\n//# sourceMappingURL=command.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"./command\");\nconst file_command_1 = require(\"./file-command\");\nconst utils_1 = require(\"./utils\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\n/**\n * The code to exit an action\n */\nvar ExitCode;\n(function (ExitCode) {\n    /**\n     * A code indicating that the action was successful\n     */\n    ExitCode[ExitCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * A code indicating that the action was a failure\n     */\n    ExitCode[ExitCode[\"Failure\"] = 1] = \"Failure\";\n})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));\n//-----------------------------------------------------------------------\n// Variables\n//-----------------------------------------------------------------------\n/**\n * Sets env variable for this action and future actions in the job\n * @param name the name of the variable to set\n * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction exportVariable(name, val) {\n    const convertedVal = utils_1.toCommandValue(val);\n    process.env[name] = convertedVal;\n    const filePath = process.env['GITHUB_ENV'] || '';\n    if (filePath) {\n        const delimiter = '_GitHubActionsFileCommandDelimeter_';\n        const commandValue = `${name}<<${delimiter}${os.EOL}${convertedVal}${os.EOL}${delimiter}`;\n        file_command_1.issueCommand('ENV', commandValue);\n    }\n    else {\n        command_1.issueCommand('set-env', { name }, convertedVal);\n    }\n}\nexports.exportVariable = exportVariable;\n/**\n * Registers a secret which will get masked from logs\n * @param secret value of the secret\n */\nfunction setSecret(secret) {\n    command_1.issueCommand('add-mask', {}, secret);\n}\nexports.setSecret = setSecret;\n/**\n * Prepends inputPath to the PATH (for this action and future actions)\n * @param inputPath\n */\nfunction addPath(inputPath) {\n    const filePath = process.env['GITHUB_PATH'] || '';\n    if (filePath) {\n        file_command_1.issueCommand('PATH', inputPath);\n    }\n    else {\n        command_1.issueCommand('add-path', {}, inputPath);\n    }\n    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;\n}\nexports.addPath = addPath;\n/**\n * Gets the value of an input.  The value is also trimmed.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string\n */\nfunction getInput(name, options) {\n    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';\n    if (options && options.required && !val) {\n        throw new Error(`Input required and not supplied: ${name}`);\n    }\n    return val.trim();\n}\nexports.getInput = getInput;\n/**\n * Sets the value of an output.\n *\n * @param     name     name of the output to set\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setOutput(name, value) {\n    command_1.issueCommand('set-output', { name }, value);\n}\nexports.setOutput = setOutput;\n/**\n * Enables or disables the echoing of commands into stdout for the rest of the step.\n * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.\n *\n */\nfunction setCommandEcho(enabled) {\n    command_1.issue('echo', enabled ? 'on' : 'off');\n}\nexports.setCommandEcho = setCommandEcho;\n//-----------------------------------------------------------------------\n// Results\n//-----------------------------------------------------------------------\n/**\n * Sets the action status to failed.\n * When the action exits it will be with an exit code of 1\n * @param message add error issue message\n */\nfunction setFailed(message) {\n    process.exitCode = ExitCode.Failure;\n    error(message);\n}\nexports.setFailed = setFailed;\n//-----------------------------------------------------------------------\n// Logging Commands\n//-----------------------------------------------------------------------\n/**\n * Gets whether Actions Step Debug is on or not\n */\nfunction isDebug() {\n    return process.env['RUNNER_DEBUG'] === '1';\n}\nexports.isDebug = isDebug;\n/**\n * Writes debug message to user log\n * @param message debug message\n */\nfunction debug(message) {\n    command_1.issueCommand('debug', {}, message);\n}\nexports.debug = debug;\n/**\n * Adds an error issue\n * @param message error issue message. Errors will be converted to string via toString()\n */\nfunction error(message) {\n    command_1.issue('error', message instanceof Error ? message.toString() : message);\n}\nexports.error = error;\n/**\n * Adds an warning issue\n * @param message warning issue message. Errors will be converted to string via toString()\n */\nfunction warning(message) {\n    command_1.issue('warning', message instanceof Error ? message.toString() : message);\n}\nexports.warning = warning;\n/**\n * Writes info to log with console.log.\n * @param message info message\n */\nfunction info(message) {\n    process.stdout.write(message + os.EOL);\n}\nexports.info = info;\n/**\n * Begin an output group.\n *\n * Output until the next `groupEnd` will be foldable in this group\n *\n * @param name The name of the output group\n */\nfunction startGroup(name) {\n    command_1.issue('group', name);\n}\nexports.startGroup = startGroup;\n/**\n * End an output group.\n */\nfunction endGroup() {\n    command_1.issue('endgroup');\n}\nexports.endGroup = endGroup;\n/**\n * Wrap an asynchronous function call in a group.\n *\n * Returns the same type as the function itself.\n *\n * @param name The name of the group\n * @param fn The function to wrap in the group\n */\nfunction group(name, fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n        startGroup(name);\n        let result;\n        try {\n            result = yield fn();\n        }\n        finally {\n            endGroup();\n        }\n        return result;\n    });\n}\nexports.group = group;\n//-----------------------------------------------------------------------\n// Wrapper action state\n//-----------------------------------------------------------------------\n/**\n * Saves state for current action, the state can only be retrieved by this action's post job execution.\n *\n * @param     name     name of the state to store\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction saveState(name, value) {\n    command_1.issueCommand('save-state', { name }, value);\n}\nexports.saveState = saveState;\n/**\n * Gets the value of an state set by this action's main execution.\n *\n * @param     name     name of the state to get\n * @returns   string\n */\nfunction getState(name) {\n    return process.env[`STATE_${name}`] || '';\n}\nexports.getState = getState;\n//# sourceMappingURL=core.js.map","\"use strict\";\n// For internal use, subject to change.\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\nfunction issueCommand(command, message) {\n    const filePath = process.env[`GITHUB_${command}`];\n    if (!filePath) {\n        throw new Error(`Unable to find environment variable for file command ${command}`);\n    }\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Missing file at path: ${filePath}`);\n    }\n    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {\n        encoding: 'utf8'\n    });\n}\nexports.issueCommand = issueCommand;\n//# sourceMappingURL=file-command.js.map","\"use strict\";\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Sanitizes an input into a string so it can be passed into issueCommand safely\n * @param input input to sanitize into a string\n */\nfunction toCommandValue(input) {\n    if (input === null || input === undefined) {\n        return '';\n    }\n    else if (typeof input === 'string' || input instanceof String) {\n        return input;\n    }\n    return JSON.stringify(input);\n}\nexports.toCommandValue = toCommandValue;\n//# sourceMappingURL=utils.js.map","module.exports = require(\"fs\");;","module.exports = require(\"os\");;","module.exports = require(\"path\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\n__webpack_require__.ab = __dirname + \"/\";","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(109);\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACpnBA;AACA;A;;;;;ACDA;AACA;A;;;;;ACDA;AACA;A;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC5BA;AACA;ACDA;AACA;AACA;AACA;;A","sourceRoot":""}